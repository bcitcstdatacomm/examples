query                   = <query, see [RFC3986], Section 3.4>
absolute-URI            = <absolute-URI, see [RFC3986], Section 4.3>
method                  = "GET" / "HEAD" / "POST" / "PUT" /
                          "PATCH" / "DELETE" / "CONNECT" /
                          "OPTIONS" / "TRACE"
obs-text                = %x80-FF
tchar                   = "!" / "#" / "$" / "%" / "&" /
                          "'" / "*" / "+" / "-" / "." /
                          "^" / "_" / "`" / "|" / "~" /
                          DIGIT / ALPHA
token                   = 1*tchar
field-name              = token
OWS                     = *( SP / HTAB )
field-vchar             = VCHAR / obs-text
field-content           = field-vchar [ 1*( SP / HTAB ) field-vchar ]
obs-fold                = CRLF 1*( SP / HTAB )
field-value             = *( field-content / obs-fold )
header-field            = field-name ":" OWS field-value OWS
authority               = <authority, see [RFC3986], Section 3.2>

; *****************************************************************************

segment                 = <segment, see [RFC3986], Section 3.3>
absolute-path           = 1*( "/" segment )
origin-form             = absolute-path [ "?" query ]
absolute-form           = absolute-URI
authority-form          = authority
asterisk-form           = "*"
request-target          = origin-form / absolute-form /
                          authority-form / asterisk-form
HTTP-name               = %x48.54.54.50 ; HTTP
HTTP-version            = HTTP-name "/" DIGIT "." DIGIT
request-line            = method SP request-target SP HTTP-version CRLF
extension-code          = 3DIGIT
status-code             = "100" / ; Continue
                          "101" / ; Switching Protocols
                          "200" / ; OK
                          "201" / ; Created
                          "202" / ; Accepted
                          "203" / ; Non-Authoritative Information
                          "204" / ; No Content
                          "205" / ; Reset Content
                          "206" / ; Partial Content
                          "300" / ; Multiple Choices
                          "301" / ; Moved Permanently
                          "302" / ; Moved Temporarily
                          "303" / ; See Other
                          "304" / ; Not Modified
                          "305" / ; Use Proxy
                          "400" / ; Bad Request
                          "401" / ; Unauthorized
                          "402" / ; Payment Required
                          "403" / ; Forbidden
                          "404" / ; Not Found
                          "405" / ; Method Not Allowed
                          "406" / ; Not Acceptable
                          "407" / ; Proxy Authentication Required
                          "408" / ; Request Time-out
                          "409" / ; Conflict
                          "410" / ; Gone
                          "411" / ; Length Required
                          "412" / ; Precondition Failed
                          "413" / ; Request Entity Too Large
                          "414" / ; Request-URI Too Large
                          "415" / ; Unsupported Media Type
                          "500" / ; Internal Server Error
                          "501" / ; Not Implemented
                          "502" / ; Bad Gateway
                          "503" / ; Service Unavailable
                          "504" / ; Gateway Time-out
                          "505" / ; HTTP Version not supported
                          extension-code
reason-phrase           = *( HTAB / SP / VCHAR / obs-text )
status-line             = HTTP-version SP status-code SP reason-phrase CRLF
start-line              = request-line / status-line
message-body            = *OCTET
HTTP-message            = start-line *( header-field CRLF ) CRLF [ message-body]

; *****************************************************************************

quoted-pair             = "\" ( HTAB / SP / VCHAR / obs-text )
qdtext                  = HTAB / SP / "!" / %x23-5B ; '#'-'[' / %x5D-7E ; ']'-'~' / obs-text
quoted-string           = DQUOTE *( qdtext / quoted-pair ) DQUOTE
first-byte-pos          = 1*DIGIT
last-byte-pos           = 1*DIGIT
bytes-unit              = "bytes"
other-range-unit        = token
BWS                     = OWS
transfer-parameter      = token BWS "=" BWS ( token / quoted-string )
transfer-extension      = token *( OWS ";" OWS transfer-parameter )
transfer-coding         = "chunked" / "compress" / "deflate" / "gzip" / transfer-extension
protocol-name           = token
protocol-version        = token
uri-host                = <host, see [RFC3986], Section 3.2.2>
port                    = <port, see [RFC3986], Section 3.2.3>
pseudonym               = token
RWS                     = 1*( SP / HTAB )
ctext                   = HTAB / SP / %x21-27 ; '!'-''' / %x2A-5B ; '*'-'[' / %x5D-7E ; ']'-'~' / obs-text
comment                 = "(" *( ctext / quoted-pair / comment ) ")"
type                    = token
subtype                 = token
parameter               = token "=" ( token / quoted-string )
content-coding          = token
relative-part           = <relative-part, see [RFC3986], Section 4.2>
partial-URI             = relative-part [ "?" query ]
weak                    = "W/"
etagc                   = "!" / %x23-7E ; '#'-'~' / obs-text
opaque-tag              = DQUOTE *etagc DQUOTE
entity-tag              = [ weak ] opaque-tag
day-name                = "Mon" /
                          "Tue" /
                          "Wed" /
                          "Thu" /
                          "Fri" /
                          "Sat" /
                          "Sun"
day                     = 2DIGIT
month                   = "Jan" /
                          "Feb" /
                          "Mar" /
                          "Apr" /
                          "May" /
                          "Jun" /
                          "Jul" /
                          "Aug" /
                          "Sep" /
                          "Oct" /
                          "Nov" /
                          "Dec"
year                    = 4DIGIT
date1                   = day SP month SP year
hour                    = 2DIGIT
minute                  = 2DIGIT
second                  = 2DIGIT
time-of-day             = hour ":" minute ":" second
GMT                     = "GMT"
IMF-fixdate             = day-name "," SP date1 SP time-of-day SP GMT
day-name-l              = "Monday" /
                          "Tuesday" /
                          "Wednesday" /
                          "Thursday" /
                          "Friday" /
                          "Saturday" /
                          "Sunday"
date2                   = day "-" month "-" 2DIGIT
rfc850-date             = day-name-l "," SP date2 SP time-of-day SP GMT
date3                   = month SP ( 2DIGIT / ( SP DIGIT ) )
asctime-date            = day-name SP date3 SP time-of-day SP year
obs-date                = rfc850-date / asctime-date
HTTP-date               = IMF-fixdate / obs-date
qvalue                  = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )
weight                  = OWS ";" OWS "q=" qvalue
auth-scheme             = token
token68                 = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" ) *"="
auth-param              = token BWS "=" BWS ( token / quoted-string )
credentials             = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param ) *( OWS "," [ OWS auth-param ] ) ] ) ]
product-version         = token
product                 = token [ "/" product-version ]
challenge               = auth-scheme [ 1*SP ( token68 / [ ( "," / auth-param ) *( OWS "," [ OWS auth-param ] ) ] ) ]

; *************************** common headers

cache-directive         = token [ "=" ( token / quoted-string ) ]
Cache-Control           = *( "," OWS ) cache-directive *( OWS "," [ OWS cache-directive ] )

Content-Length          = 1*DIGIT

complete-length         = 1*DIGIT
byte-range              = first-byte-pos "-" last-byte-pos
byte-range-resp         = byte-range "/" ( complete-length / "*" )
unsatisfied-range       = "*/" complete-length
byte-content-range      = bytes-unit SP ( byte-range-resp / unsatisfied-range )
other-range-resp        = *CHAR
other-content-range     = other-range-unit SP other-range-resp
Content-Range           = byte-content-range / other-content-range

Trailer                 = *( "," OWS ) field-name *( OWS "," [ OWS field-name ] )

Transfer-Encoding       = *( "," OWS ) transfer-coding *( OWS "," [ OWS transfer-coding ] )

connection-option       = token
Connection              = *( "," OWS ) connection-option *( OWS "," [ OWS connection-option ] )

protocol                = protocol-name [ "/" protocol-version ]
Upgrade                 = *( "," OWS ) protocol *( OWS "," [ OWS protocol ] )

received-protocol       = [ protocol-name "/" ] protocol-version
received-by             = ( uri-host [ ":" port ] ) / pseudonym
Via                     = *( "," OWS ) ( received-protocol RWS received-by [ RWS comment ] ) *( OWS "," [ OWS ( received-protocol RWS received-by [ RWS comment ] ) ] )

media-type              = type "/" subtype *( OWS ";" OWS parameter )
Content-Type            = media-type

Content-Encoding        = *( "," OWS ) content-coding *( OWS "," [ OWS content-coding ] )

language-tag            = <Language-Tag, see [RFC5646], Section 2.1>
Content-Language        = *( "," OWS ) language-tag *( OWS "," [ OWS language-tag ] )

Content-Location        = absolute-URI / partial-URI

; *************************** request headers

Expect                  = "100-continue"

Host                    = uri-host [ ":" port ]

Max-Forwards            = 1*DIGIT

extension-pragma        = token [ "=" ( token / quoted-string ) ]
pragma-directive        = "no-cache" / extension-pragma
Pragma                  = *( "," OWS ) pragma-directive *( OWS "," [ OWS pragma-directive ] )

byte-range-spec         = first-byte-pos "-" [ last-byte-pos ]
suffix-length           = 1*DIGIT
suffix-byte-range-spec  = "-" suffix-length
byte-range-set          = *( "," OWS ) ( byte-range-spec / suffix-byte-range-spec ) *( OWS "," [ OWS ( byte-range-spec / suffix-byte-range-spec ) ] )
byte-ranges-specifier   = bytes-unit "=" byte-range-set
other-range-set         = 1*VCHAR
other-ranges-specifier  = other-range-unit "=" other-range-set
Range                   = byte-ranges-specifier / other-ranges-specifier

rank                    = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )
t-ranking               = OWS ";" OWS "q=" rank
t-codings               = "trailers" / ( transfer-coding [ t-ranking ] )
TE                      = [ ( "," / t-codings ) *( OWS "," [ OWS t-codings ] ) ]

If-Match                = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS entity-tag ] ) )

If-None-Match           = "*" / ( *( "," OWS ) entity-tag *( OWS "," [ OWS entity-tag ] ) )

If-Modified-Since       = HTTP-date

If-Unmodified-Since     = HTTP-date

If-Range                = entity-tag / HTTP-date

media-range             = ( "*/*" / ( type "/*" ) / ( type "/" subtype ) ) *( OWS ";" OWS parameter )
accept-ext              = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
accept-params           = weight *accept-ext
Accept                  = [ ( "," / ( media-range [ accept-params ] ) ) *( OWS "," [ OWS ( media-range [ accept-params ] ) ] ) ]

charset                 = token
Accept-Charset          = *( "," OWS ) ( ( charset / "*" ) [ weight ] ) *( OWS "," [ OWS ( ( charset / "*" ) [ weight ] ) ] )

codings                 = content-coding / "identity" / "*"
Accept-Encoding         = [ ( "," / ( codings [ weight ] ) ) *( OWS "," [ OWS ( codings [ weight ] ) ] ) ]

language-range          = <language-range, see [RFC4647], Section 2.1>
Accept-Language         = *( "," OWS ) ( language-range [ weight ] ) *( OWS "," [ OWS ( language-range [ weight ] ) ] )

Authorization           = credentials

Proxy-Authorization     = credentials

mailbox                 = <mailbox, see [RFC5322], Section 3.4>
From                    = mailbox

Referer                 = absolute-URI / partial-URI

User-Agent              = product *( RWS ( product / comment ) )

; *************************** response headers

delta-seconds           = 1*DIGIT
Age                     = delta-seconds

Expires                 = HTTP-date

Date                    = HTTP-date

URI-reference = <URI-reference, see [RFC3986], Section 4.1>
Location = URI-reference

delay-seconds           = 1*DIGIT
Retry-After             = HTTP-date / delay-seconds

Vary                    = "*" / ( *( "," OWS ) field-name *( OWS "," [ OWS field-name ] ) )

warn-code               = 3DIGIT
warn-agent              = ( uri-host [ ":" port ] ) / pseudonym
warn-text               = quoted-string
warn-date               = DQUOTE HTTP-date DQUOTE
warning-value           = warn-code SP warn-agent SP warn-text [ SP warn-date ]
Warning                 = *( "," OWS ) warning-value *( OWS "," [ OWS warning-value ])

ETag                    = entity-tag

Last-Modified           = HTTP-date

WWW-Authenticate        = *( "," OWS ) challenge *( OWS "," [ OWS challenge ] )

Proxy-Authenticate      = *( "," OWS ) challenge *( OWS "," [ OWS challenge ] )

range-unit              = bytes-unit / other-range-unit
acceptable-ranges       = ( *( "," OWS ) range-unit *( OWS "," [ OWS range-unit ] ) ) / "none"
Accept-Ranges           = acceptable-ranges

Allow                   = [ ( "," / method ) *( OWS "," [ OWS method ] ) ]

Server                  = product *( RWS ( product / comment ) )

; *************************** ignore for now

;chunk                  = chunk-size [ chunk-ext ] CRLF chunk-data CRLF
;chunk-ext-val          = token / quoted-string
;chunk-ext-name         = token
;chunk-ext              = *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
;chunk-size             = 1*HEXDIG
;chunk-data             = 1*OCTET
;last-chunk             = 1*"0" [ chunk-ext ] CRLF
;trailer-part           = *( header-field CRLF )
;chunked-body           = *chunk last-chunk trailer-part CRLF

;scheme                 = <scheme, see [RFC3986], Section 3.1>
;fragment                 = <fragment, see [RFC3986], Section 3.5>
;path-abempty             = <path-abempty, see [RFC3986], Section 3.3>
;http-URI               = "http://" authority path-abempty [ "?" query ] [ "#" fragment ]
;https-URI              = "https://" authority path-abempty [ "?" query ] [ "#" fragment ]
